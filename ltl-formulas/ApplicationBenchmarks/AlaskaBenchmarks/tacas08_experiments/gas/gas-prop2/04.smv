-- gas station system generated by gas_generator_script
-- by Stefano Tonetta (stonetta@dit.unitn.it)
--
-- The protocol consists of N customers, M pumps and 1 operator. For a
-- description of the problem look at:
-- S. Duri, U. Buy, R. Devarapalli, and S.M. Shatz. "Using state
-- space methods for deadlock analysis in Ada tasking.". ISSTA'93.
--
-- This solution to the gas station problem is a synchronour SMV version of
-- the inca code:
-- http://www.cis.ksu.edu/santos/case-studies/AG-Case-studies/Ada/gas-station/Models/gas_q.inca
--
-- customers number = 4
-- pumps number = 1
--



MODULE main

VAR
 operator: operator_task(pump1,customer1,customer2,customer3,customer4);
 pump1: pump_task(operator_activate_1_1,operator_activate_1_2,operator_activate_1_3,operator_activate_1_4,customer1_start1,customer2_start1,customer3_start1,customer4_start1,customers_stop,operator_change1);
 customer1: customer_task(operator_prepaid_1_1,operator_change_1_1,pump1_started1,pump1_charged1);
 customer2: customer_task(operator_prepaid_2_1,operator_change_2_1,pump1_started2,pump1_charged2);
 customer3: customer_task(operator_prepaid_3_1,operator_change_3_1,pump1_started3,pump1_charged3);
 customer4: customer_task(operator_prepaid_4_1,operator_change_4_1,pump1_started4,pump1_charged4);

DEFINE
 operator_prepaid_1_1:=operator.status=send_pump1_activate1;
 operator_prepaid_2_1:=operator.status=send_pump1_activate2;
 operator_prepaid_3_1:=operator.status=send_pump1_activate3;
 operator_prepaid_4_1:=operator.status=send_pump1_activate4;
 operator_change_1_1:=operator.status=send_customer1_change1;
 operator_change_2_1:=operator.status=send_customer2_change1;
 operator_change_3_1:=operator.status=send_customer3_change1;
 operator_change_4_1:=operator.status=send_customer4_change1;
 operator_change1:=operator_change_1_1 | operator_change_2_1 | operator_change_3_1 | operator_change_4_1;
 operator_activate_1_1:=operator.status=send_pump1_activate1;
 operator_activate_1_2:=operator.status=send_pump1_activate2;
 operator_activate_1_3:=operator.status=send_pump1_activate3;
 operator_activate_1_4:=operator.status=send_pump1_activate4;
 customer1_start1:=customer1.status=send_start1;
 customer2_start1:=customer2.status=send_start1;
 customer3_start1:=customer3.status=send_start1;
 customer4_start1:=customer4.status=send_start1;
 pump1_started1:=pump1.status=charging1;
 pump1_started2:=pump1.status=charging2;
 pump1_started3:=pump1.status=charging3;
 pump1_started4:=pump1.status=charging4;
 pump1_charged1:=pump1.status=charged1;
 pump1_charged2:=pump1.status=charged2;
 pump1_charged3:=pump1.status=charged3;
 pump1_charged4:=pump1.status=charged4;
 customers_stop:=customer1.status=send_stop1 | customer1.status=send_stop1 | customer1.status=send_stop1 | customer2.status=send_stop1;
LTLSPEC (( G(pump1_started1 -> ((! operator_prepaid_1_1) U (operator_change_1_1 | G!operator_prepaid_1_1))) ) -> ( G( (pump1_started1 & ((! pump1_charged1) U operator_prepaid_2_1) ) -> ((!operator_activate_1_1) U (operator_activate_1_2 | G ! operator_activate_1_1 ))) ))

MODULE operator_task(pump1,customer1,customer2,customer3,customer4)

VAR
 status: {wait,enqueue_1_1,enqueue_2_1,enqueue_3_1,enqueue_4_1,send_pump1_activate1,send_pump1_activate2,send_pump1_activate3,send_pump1_activate4,send_customer1_change1,send_customer2_change1,send_customer3_change1,send_customer4_change1};
 queues: array 1..1 of array 1..4 of 0..4;

DEFINE
 customer1_waiting:=
   queues[1][1]=1 |
   queues[1][2]=1 |
   queues[1][3]=1 |
   queues[1][4]=1;
 customer2_waiting:=
   queues[1][1]=2 |
   queues[1][2]=2 |
   queues[1][3]=2 |
   queues[1][4]=2;
 customer3_waiting:=
   queues[1][1]=3 |
   queues[1][2]=3 |
   queues[1][3]=3 |
   queues[1][4]=3;
 customer4_waiting:=
   queues[1][1]=4 |
   queues[1][2]=4 |
   queues[1][3]=4 |
   queues[1][4]=4;
 queue_tails[1]:=
   case
     queues[1][1]=0: 1;
     queues[1][1]!=0 & queues[1][2]=0: 2;
     queues[1][1]!=0 & queues[1][2]!=0 & queues[1][3]=0: 3;
     queues[1][1]!=0 & queues[1][2]!=0 & queues[1][3]!=0 & queues[1][4]=0: 4;
     queues[1][1]!=0 & queues[1][2]!=0 & queues[1][3]!=0 & queues[1][4]!=0: 0;
   esac;

ASSIGN
 init(status):=wait;
 next(status):=
   case
     status=wait &
       (customer1.status=send_prepay1 | customer2.status=send_prepay1 | customer3.status=send_prepay1 | customer4.status=send_prepay1 | pump1.status=charged1 | pump1.status=charged2 | pump1.status=charged3 | pump1.status=charged4):
       {enqueue_1_1,enqueue_2_1,enqueue_3_1,enqueue_4_1,send_customer1_change1,send_customer2_change1,send_customer3_change1,send_customer4_change1};
     status=wait: wait;
     status=enqueue_1_1 & queues[1][1]!=0: wait;
     status=enqueue_1_1: send_pump1_activate1;
     status=enqueue_2_1 & queues[1][1]!=0: wait;
     status=enqueue_2_1: send_pump1_activate2;
     status=enqueue_3_1 & queues[1][1]!=0: wait;
     status=enqueue_3_1: send_pump1_activate3;
     status=enqueue_4_1 & queues[1][1]!=0: wait;
     status=enqueue_4_1: send_pump1_activate4;
     status=send_pump1_activate1 & ! (pump1.status=activated1): send_pump1_activate1;
     status=send_pump1_activate1: wait;
     status=send_pump1_activate2 & ! (pump1.status=activated2): send_pump1_activate2;
     status=send_pump1_activate2: wait;
     status=send_pump1_activate3 & ! (pump1.status=activated3): send_pump1_activate3;
     status=send_pump1_activate3: wait;
     status=send_pump1_activate4 & ! (pump1.status=activated4): send_pump1_activate4;
     status=send_pump1_activate4: wait;
     status=send_customer1_change1 & ! (customer1.status=idle):
       send_customer1_change1;
     status=send_customer1_change1 & queues[1][2]=0: wait;
     status=send_customer1_change1 & queues[1][2]=1:
       send_pump1_activate1;
     status=send_customer1_change1 & queues[1][2]=2:
       send_pump1_activate2;
     status=send_customer1_change1 & queues[1][2]=3:
       send_pump1_activate3;
     status=send_customer1_change1 & queues[1][2]=4:
       send_pump1_activate4;
     status=send_customer2_change1 & ! (customer2.status=idle):
       send_customer2_change1;
     status=send_customer2_change1 & queues[1][2]=0: wait;
     status=send_customer2_change1 & queues[1][2]=1:
       send_pump1_activate1;
     status=send_customer2_change1 & queues[1][2]=2:
       send_pump1_activate2;
     status=send_customer2_change1 & queues[1][2]=3:
       send_pump1_activate3;
     status=send_customer2_change1 & queues[1][2]=4:
       send_pump1_activate4;
     status=send_customer3_change1 & ! (customer3.status=idle):
       send_customer3_change1;
     status=send_customer3_change1 & queues[1][2]=0: wait;
     status=send_customer3_change1 & queues[1][2]=1:
       send_pump1_activate1;
     status=send_customer3_change1 & queues[1][2]=2:
       send_pump1_activate2;
     status=send_customer3_change1 & queues[1][2]=3:
       send_pump1_activate3;
     status=send_customer3_change1 & queues[1][2]=4:
       send_pump1_activate4;
     status=send_customer4_change1 & ! (customer4.status=idle):
       send_customer4_change1;
     status=send_customer4_change1 & queues[1][2]=0: wait;
     status=send_customer4_change1 & queues[1][2]=1:
       send_pump1_activate1;
     status=send_customer4_change1 & queues[1][2]=2:
       send_pump1_activate2;
     status=send_customer4_change1 & queues[1][2]=3:
       send_pump1_activate3;
     status=send_customer4_change1 & queues[1][2]=4:
       send_pump1_activate4;
   esac;
 init(queues[1][1]):=0;
 next(queues[1][1]):=
   case
     status=enqueue_1_1 & queue_tails[1]=1: 1;
     status=enqueue_2_1 & queue_tails[1]=1: 2;
     status=enqueue_3_1 & queue_tails[1]=1: 3;
     status=enqueue_4_1 & queue_tails[1]=1: 4;
     status=send_customer1_change1 | status=send_customer2_change1 | status=send_customer3_change1 | status=send_customer4_change1: queues[1][2];
     1: queues[1][1];
   esac;
 init(queues[1][2]):=0;
 next(queues[1][2]):=
   case
     status=enqueue_1_1 & queue_tails[1]=2: 1;
     status=enqueue_2_1 & queue_tails[1]=2: 2;
     status=enqueue_3_1 & queue_tails[1]=2: 3;
     status=enqueue_4_1 & queue_tails[1]=2: 4;
     status=send_customer1_change1 | status=send_customer2_change1 | status=send_customer3_change1 | status=send_customer4_change1: queues[1][3];
     1: queues[1][2];
   esac;
 init(queues[1][3]):=0;
 next(queues[1][3]):=
   case
     status=enqueue_1_1 & queue_tails[1]=3: 1;
     status=enqueue_2_1 & queue_tails[1]=3: 2;
     status=enqueue_3_1 & queue_tails[1]=3: 3;
     status=enqueue_4_1 & queue_tails[1]=3: 4;
     status=send_customer1_change1 | status=send_customer2_change1 | status=send_customer3_change1 | status=send_customer4_change1: queues[1][4];
     1: queues[1][3];
   esac;
 init(queues[1][4]):=0;
 next(queues[1][4]):=
   case
     status=enqueue_1_1 & queue_tails[1]=4: 1;
     status=enqueue_2_1 & queue_tails[1]=4: 2;
     status=enqueue_3_1 & queue_tails[1]=4: 3;
     status=enqueue_4_1 & queue_tails[1]=4: 4;
     status=send_customer1_change1 | status=send_customer2_change1 | status=send_customer3_change1 | status=send_customer4_change1: 0;
     1: queues[1][4];
   esac;

INVAR
 (status=enqueue_1_1 -> customer1.status=send_prepay1) &
 (status=enqueue_2_1 -> customer2.status=send_prepay1) &
 (status=enqueue_3_1 -> customer3.status=send_prepay1) &
 (status=enqueue_4_1 -> customer4.status=send_prepay1) &
 (status=send_customer1_change1 -> pump1.status=charged1) &
 (status=send_customer2_change1 -> pump1.status=charged2) &
 (status=send_customer3_change1 -> pump1.status=charged3) &
 (status=send_customer4_change1 -> pump1.status=charged4)

-- INVARSPEC
--   status=enqueue_1_1 & prepay[1][1] -> !customer1_waiting

-- INVARSPEC
--   status=enqueue_2_1 & prepay[2][1] -> !customer2_waiting

-- INVARSPEC
--   status=enqueue_3_1 & prepay[3][1] -> !customer3_waiting

-- INVARSPEC
--   status=enqueue_4_1 & prepay[4][1] -> !customer4_waiting

-- INVARSPEC
--   status=acc_charge_1 -> queues[1][1]>0



MODULE customer_task(operator_prepaid1,change1,pump1_charging,pump1_charged)

VAR
 status: {idle,send_prepay1,send_start1,send_stop1,wait_change1};

ASSIGN
 init(status):=idle;
 next(status):=
   case
     status=idle: {idle,send_prepay1};
     status=send_prepay1 & !operator_prepaid1: send_prepay1;
     status=send_prepay1: send_start1;
     status=send_start1 & !pump1_charging: send_start1;
     status=send_start1: send_stop1;
     status=send_stop1 & !pump1_charged: send_stop1;
     status=send_stop1: wait_change1;
     status=wait_change1 & !change1: wait_change1;
     status=wait_change1: idle;
   esac;



MODULE pump_task(activate1,activate2,activate3,activate4,start1,start2,start3,start4,stop,operator_change)

VAR
 status: {wait_activate,activated1,activated2,activated3,activated4,charging1,charging2,charging3,charging4,charged1,charged2,charged3,charged4};

ASSIGN
 init(status):=wait_activate;
 next(status):=
   case
     status=wait_activate & activate1: activated1;
     status=wait_activate & activate2: activated2;
     status=wait_activate & activate3: activated3;
     status=wait_activate & activate4: activated4;
     status=wait_activate: wait_activate;
     (status=activated1 | status=activated2 | status=activated3 | status=activated4) & (start1 | start2 | start3 | start4): {charging1,charging2,charging3,charging4};
     (status=activated1 | status=activated2 | status=activated3 | status=activated4): status;
     status=charging1 & stop: charged1;
     status=charging2 & stop: charged2;
     status=charging3 & stop: charged3;
     status=charging4 & stop: charged4;
     (status=charging1 | status=charging2 | status=charging3 | status=charging4): status;
     (status=charged1 | status=charged2 | status=charged3 | status=charged4) & operator_change:
        wait_activate;
     (status=charged1 | status=charged2 | status=charged3 | status=charged4): status;
   esac;

INVAR
 (status=charging1 -> start1) &
 (status=charging2 -> start2) &
 (status=charging3 -> start3) &
 (status=charging4 -> start4)
